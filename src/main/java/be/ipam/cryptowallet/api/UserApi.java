/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package be.ipam.cryptowallet.api;

import be.ipam.cryptowallet.api.model.User;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "User", description = "the User API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/users/ : Ajouter un user
     * Ajout un user
     *
     * @param user Utilisateur object (optional)
     * @return created (status code 201)
     */
    @ApiOperation(value = "Ajouter un user", nickname = "addUser", notes = "Ajout un user", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "created") })
    @RequestMapping(value = "/api/v1/users/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<User> addUser(@ApiParam(value = "Utilisateur object"  )  @Valid @RequestBody(required = false) User user) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/users/{userId} : Delete user
     * Delete user
     *
     * @param userId USer Identifier (required)
     * @return No content (status code 204)
     */
    @ApiOperation(value = "Delete user", nickname = "deleteUserById", notes = "Delete user", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No content") })
    @RequestMapping(value = "/api/v1/users/{userId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteUserById(@ApiParam(value = "USer Identifier",required=true) @PathVariable("userId") long userId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/users/{userId} : Retourne un user
     * Retourne un user
     *
     * @param userId USer Identifier (required)
     * @return successful operation (status code 200)
     *         or Given user ID doesn&#39;t exist (status code 404)
     */
    @ApiOperation(value = "Retourne un user", nickname = "getUserById", notes = "Retourne un user", response = User.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Given user ID doesn't exist") })
    @RequestMapping(value = "/api/v1/users/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<User> getUserById(@ApiParam(value = "USer Identifier",required=true) @PathVariable("userId") long userId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstname\" : \"firstname\", \"password\" : \"password\", \"mail\" : \"mail\", \"userId\" : 0.8008281904610115, \"lastname\" : \"lastname\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /api/v1/users/{userId} : update the user
     * update the user
     *
     * @param userId USer Identifier (required)
     * @param user Utilisateur object (optional)
     * @return Updated (status code 200)
     */
    @ApiOperation(value = "update the user", nickname = "updateUser", notes = "update the user", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated") })
    @RequestMapping(value = "/api/v1/users/{userId}",
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<Void> updateUser(@ApiParam(value = "USer Identifier",required=true) @PathVariable("userId") long userId,@ApiParam(value = "Utilisateur object"  )  @Valid @RequestBody(required = false) User user) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
